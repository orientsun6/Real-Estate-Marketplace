// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const verifier = artifacts.require('Verifier');
const proofFromFile = require("../../zokrates/code/square/proof.json");


// - use the contents from proof.json generated from zokrates steps
contract('Verifier', accounts => {

    const account_one = accounts[0];
    
    before(async() => { 
        contractInstance = await verifier.new({from: accounts[0]});
    });

    // Test verification with correct proof
    it('verification with correct proof', async function(){
        let verified = await contractInstance.verifyTx
            .call(proofFromFile.proof.A,
                proofFromFile.proof.A_p,
                proofFromFile.proof.B,
                proofFromFile.proof.B_p,
                proofFromFile.proof.C,
                proofFromFile.proof.C_p,
                proofFromFile.proof.H,
                proofFromFile.proof.K,
                proofFromFile.input,
                {from:account_one});

        assert.equal(verified, true, "Verification is valid");
    })

    // Test verification with incorrect proof
    it('verification with incorrect proof', async function(){
        let input = [1, 2];
        let verified = await contractInstance.verifyTx
            .call(proofFromFile.proof.A,
                proofFromFile.proof.A_p,
                proofFromFile.proof.B,
                proofFromFile.proof.B_p,
                proofFromFile.proof.C,
                proofFromFile.proof.C_p,
                proofFromFile.proof.H,
                proofFromFile.proof.K,
                input,
                {from:account_one});

        assert.equal(verified, false, "Verification is invalid");
    })
});


